component:
¶ Pagination 分页

about:
当数据量过多时，使用分页分解数据。
    
author:
  
¶ Attributes
参数                      说明                                              类型                  可选值                                                  默认值
small       是否使用小型分页样式               Boolean    —                       false
page-size   每页显示条目个数                      Number     —                        10
total       总条目数                                     Number     —                         -
page-count  总页数，total          Number     —                         -
                              和 page-count 
                              设置任意一个就可以
                              达到显示页码的功能；
                              如果要支持 page-sizes 
                              的更改，则需要使用 total 
                              属性   
current-page  当前页数                              Number      —                          1
layout        组件布局，
                                    子组件名用逗号分隔          String    sizes, prev, pager, 
                                          next, jumper, ->, total   'prev, pager, next, jumper, ->, total'
page-sizes  每页显示个数选择器的选项设置  Number[]    —                     [10, 20, 30, 40, 50, 100]


¶ Events
事件名称                         说明                                 回调参数
size-change     pageSize        改变时会触发 每页条数size
current-change  currentPage     改变时会触发  当前页currentPage

基础用法
设置layout，表示需要显示的内容，用逗号分隔，布局元素会依次显示。prev表示上一页，next为上一页，pager表示页码列表，除此以外还提供了jumper和total，size和特殊的布局符号->，->后的元素会靠右显示，jumper表示跳页元素，total表示显示页码总数，size用于设置每页显示的页码数量。

<div class="block">
  <span class="demonstration">页数较少时的效果</span>
  <el-pagination
    layout="prev, pager, next"
    :total="50">
  </el-pagination>
</div>
<div class="block">
  <span class="demonstration">大于 7 页时的效果</span>
    <el-pagination
      layout="prev, pager, next"
      :total="1000">
    </el-pagination>
  </div>
</div>


小型分页
在空间有限的情况下，可以使用简单的小型分页。
只需要一个small属性，它接受一个Boolean，默认为false，设为true即可启用。
<el-pagination
  small
  layout="prev, pager, next"
  :total="50">
</el-pagination>




附加功能
根据场景需要，可以添加其他功能模块。
此例是一个完整的用例，使用了size-change和current-change事件来处理页码大小和当前页变动时候触发的事件。page-sizes接受一个整型数组，数组元素为展示的选择每页显示个数的选项，[100, 200, 300, 400]表示四个选项，每页显示 100 个，200 个，300 个或者 400 个。

<template>
  <div class="block">
    <span class="demonstration">显示总数</span>
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="currentPage1"
      :page-size="100"
      layout="total, prev, pager, next"
      :total="1000">
    </el-pagination>
  </div>
  <div class="block">
    <span class="demonstration">调整每页显示条数</span>
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="currentPage2"
      :page-sizes="[100, 200, 300, 400]"
      :page-size="100"
      layout="sizes, prev, pager, next"
      :total="1000">
    </el-pagination>
  </div>
  <div class="block">
    <span class="demonstration">直接前往</span>
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="currentPage3"
      :page-size="100"
      layout="prev, pager, next, jumper"
      :total="1000">
    </el-pagination>
  </div>
  <div class="block">
    <span class="demonstration">完整功能</span>
    <el-pagination
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
      :current-page="currentPage4"
      :page-sizes="[100, 200, 300, 400]"
      :page-size="100"
      layout="total, sizes, prev, pager, next, jumper"
      :total="400">
    </el-pagination>
  </div>
</template>
<script>
  export default {
    methods: {
      handleSizeChange(val) {
        console.log(`每页 ${val} 条`);
      },
      handleCurrentChange(val) {
        this.currentPage = val;
        console.log(`当前页: ${val}`);
      }
    },
    data() {
      return {
        currentPage1: 5,
        currentPage2: 5,
        currentPage3: 5,
        currentPage4: 4
      };
    }
  }
</script>