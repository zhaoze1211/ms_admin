component:
¶ Table 表格


about:
用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。
    
author:
  
¶ Table Attributes
参数                                                      说明                                                       类型                                                                         可选值 默认值
data                    显示的数据                                            array                              —   —
height                  Table 的高度，默认为自动高度。   string/number                      —   —
                                                            如果 height 为 number 类型，
                                                            单位 px；如果 height 为 
                        string 类型，则 Table 
                                                            的高度受控于外部样式。 
                                                            
stripe                  是否为斑马纹 table           boolean                          —   false
border                  是否带有纵向边框                                 boolean                          —   false
fit                     列的宽度是否自撑开                              boolean                          —   true
show-header             是否显示表头                                          boolean                         -   true
highlight-current-row   是否要高亮当前行                                 boolean                          —   false
row-class-name          行的 className 的回调方法，       Function(row, index)/String      —   —
                                                            也可以使用字符串为所有行设置
                                                            一个固定的 className。 
                                                            
row-style               行的 style 的回调方法，也            Function(row, index)/Object       —   —
                                                            可以使用一个固定的 Object 
                                                            为所有行设置一样的 Style。   
                                                            
row-key                 行数据的 Key，用来优化 Table   Function(row)/String              —   —
                                                            的渲染；在使用 reserve-selection 
                                                            功能的情况下，该属性是必填的    
                                                            
context                 设置上下文环境，例如设置当前上      Object                             -   Table 所处上下文
                                                            下文就是 _self，父级就是 
                        $parent，根组件 $root。
                                                            优先读取 column 的 context 
                                                            属性。 
                                                            




¶ Table Events
事件名                                             说明                                                                                                                                         参数
select              当用户手动勾选数据行的 Checkbox 时触发的事件                                             selection, row
select-all          当用户手动勾选全选 Checkbox 时触发的事件                                                     selection
selection-change    当选择项发生变化时会触发该事件                                                                             selection
cell-mouse-enter    当单元格 hover 进入时会触发该事件                                                                     row, column, cell, event
cell-mouse-leave    当单元格 hover 退出时会触发该事件                                                                     row, column, cell, event
cell-click          当某个单元格被点击时会触发该事件                                                                          row, column, cell, event
row-click           当某一行被点击时会触发该事件                                                                                  row, event
header-click        当某一列的表头被点击时会触发该事件                                                                       column, event
sort-change         当表格的排序条件发生变化的时候会触发该事件                                                       { column, prop, order }

current-change      当表格的当前行发生变化的时候会触发该事件，                                                         currentRow, oldCurrentRow
                                                  如果要高亮当前行，请打开表格的 
                    highlight-current-row 属性           
                    


¶ Table Methods
方法名                                                   说明                                                                                                                                                                      参数
clearSelection          清空用户的选择，当使用 reserve-selection 功能的时候，可能会需要使用此方法                           selection

toggleRowSelection      切换某一行的选中状态，如果使用了第二个参数，                                                                                            row,selected
                                                            则是设置这一行选中与否                                                                                                                                     
                                                            
                                                            
                                                            
                                                            
¶ Table-column Attributes
参数                                          说明                                                                                              类型              可选值                                     默认值
type                对应列的类型。如果设置了 selection             string  selection/index      —
                                                  则显示多选框，如果设置了 index 
                                                  则显示该行的索引（从 1 开始计算）    
label               显示的标题                                                                                   string      —                —

prop                对应列内容的字段名，也可以使用 property 属性               string      —                —
width               对应列的宽度                                                                                string      —                —

min-width           对应列的最小宽度，与 width 的区别是                                  string      —                —
                    width 是固定的，min-width 
                                                  会把剩余宽度按比例分配给设置了 
                    min-width 的列 
                    
fixed               列是否固定在左侧或者右侧，true 表示固定在左侧               string,   true, left, right   —
                                                             boolean 
                                                             
render-header       列标题 Label 区域渲染使用的 Function           Function(h, { column, $index }) —   —

sortable            对应列是否可以排序，如果设置为 'custom'，                     boolean   true, false, 'custom'   false
                                                  则代表用户希望远程排序，需要监听 Table           , string
                                                  的 sort-change 事件    
                                                  
sort-method         对数据进行排序的时候使用的方法，                                         Function(a, b)  —              —
                                                  仅当 sortable 设置为 true 的时候有效  
                                                  
resizable           对应列是否可以通过拖动改变宽度                                             boolean         —             true
                                                （需要在 el-table 上设置 border 属性为真）  
formatter           用来格式化内容                                                                          Function(row, column)   —       —
show-overflow-tooltip   当内容过长被隐藏时显示 tooltip            Boolean          —            false

context             设置上下文环境，例如设置当前上下文就是 _self，            Object           -         Table 所处上下文
                                                    父级就是 $parent，根组件 $root     
                                                    
inline-template     指定该属性后可以自定义 column 模板，                             —                —   
                                                  参考多选的时间列，通过 row 获取行信息。
                                                  总共可以获取到 
                    { row(当前行), column(当前列), 
                    $index(行数), store(table store) } 
                                                  以及 Table 所处的上下文环境。    
                                                  
align               对齐方式                                                                                    String      left, center, right      left
class-name          列的 className                           string        —                        —

selectable          仅对 type=selection 的列有效，          Function(row, index)    —                        —
                                                  类型为 Function，Function 
                                                  的返回值用来决定这一行的 CheckBox 
                                                  是否可以勾选       
reserve-selection   仅对 type=selection 的列有效，         Boolean                 —                       false
                                                  类型为 Boolean，为 true 则代表
                                                  会保留之前数据的选项，需要配合 
                    Table 的 clearSelection 方法使用。   
                    
filters             数据过滤的选项，数组格式，数组中的元素    Array[{ text, value }]  —                        —
                                                  需要有 text 和 value 属性。 
                                                  
filter-multiple     数据过滤的选项是否多选                                  Boolean                 —                       true

filter-method       数据过滤使用的方法，如果是多选的筛选项，Function(value, row)    —                        —
                                                  对每一条数据会执行多次，任意一次返回
                    true 就会显示。   
                    
filtered-value      选中的数据过滤项，如果需要自定义表头过    Array                    —                       —
                                                  滤的渲染方式，可能会需要此属性。 
                  
                  


示例
基础表格
基础的表格展示用法。         
当el-table元素中注入data对象数组后，在el-table-column中用prop属性来对应对象中的键名即可填入数据，用label属性来定义表格的列名。可以使用width属性来定义列宽。
<template>
    <el-table
      :data="tableData"
      style="width: 100%">
      <el-table-column
        prop="date"
        label="日期"
        width="180">
      </el-table-column>
      <el-table-column
        prop="name"
        label="姓名"
        width="180">
      </el-table-column>
      <el-table-column
        prop="address"
        label="地址">
      </el-table-column>
    </el-table>
  </template>

  <script>
    export default {
      data() {
        return {
          tableData: [{
            date: '2016-05-02',
            name: '王小虎',
            address: '上海市普陀区金沙江路 1518 弄'
          }, {
            date: '2016-05-04',
            name: '王小虎',
            address: '上海市普陀区金沙江路 1517 弄'
          }, {
            date: '2016-05-01',
            name: '王小虎',
            address: '上海市普陀区金沙江路 1519 弄'
          }, {
            date: '2016-05-03',
            name: '王小虎',
            address: '上海市普陀区金沙江路 1516 弄'
          }]
        }
      }
    }
  </script>
  
  
  
带斑马纹表格
使用带斑马纹的表格，可以更容易区分出不同行的数据。          
stripe属性可以创建带斑马纹的表格。它接受一个Boolean，默认为false，设置为true即为启用。
<template>
  <el-table
    :data="tableData"
    stripe
    style="width: 100%">
    <el-table-column
      prop="date"
      label="日期"
      width="180">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="180">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址">
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1517 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1519 弄'
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1516 弄'
        }]
      }
    }
  }
</script>




带边框表格
默认情况下，Table 组件是不具有竖直方向的边框的，如果需要，可以使用border属性，它接受一个Boolean，设置为true即可启用。
<template>
  <el-table
    :data="tableData"
    border
    style="width: 100%">
    <el-table-column
      prop="date"
      label="日期"
      width="180">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="180">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址">
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1517 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1519 弄'
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1516 弄'
        }]
      }
    }
  }
</script>




带状态表格
可将表格内容 highlight 显示，方便区分「成功、信息、警告、危险」等内容。                   
可以通过指定 Table 组件的 row-class-name 属性来为 Table 中的某一行添加 class，表明该行处于某种状态。
<template>
  <el-table
    :data="tableData2"
    style="width: 100%"
    :row-class-name="tableRowClassName">
    <el-table-column
      prop="date"
      label="日期"
      width="180">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="180">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址">
    </el-table-column>
  </el-table>
</template>

<style>
  .el-table .info-row {
    background: #c9e5f5;
  }

  .el-table .positive-row {
    background: #e2f0e4;
  }
</style>
<script>
  export default {
    methods: {
      tableRowClassName(row, index) {
        if (index === 1) {
          return 'info-row';
        } else if (index === 3) {
          return 'positive-row';
        }
        return '';
      }
    },
    data() {
      return {
        tableData2: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄',
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄',
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }]
      }
    }
  }
</script>



固定表头
纵向内容过多时，可选择固定表头。   
只要在el-table元素中定义了height属性，即可实现固定表头的表格，而不需要额外的代码。
<template>
  <el-table
    :data="tableData3"
    height="250"
    border
    style="width: 100%">
    <el-table-column
      prop="date"
      label="日期"
      width="180">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="180">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址">
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData3: [{
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-08',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-06',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-07',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }]
      }
    }
  }
</script>




固定列
横向内容过多时，可选择固定列。
固定列需要使用fixed属性，它接受 Boolean 值或者leftright，表示左边固定还是右边固定。
<template>
  <el-table
    :data="tableData"
    border
    style="width: 100%">
    <el-table-column
      fixed
      prop="date"
      label="日期"
      width="150">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="120">
    </el-table-column>
    <el-table-column
      prop="province"
      label="省份"
      width="120">
    </el-table-column>
    <el-table-column
      prop="city"
      label="市区"
      width="120">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址"
      width="300">
    </el-table-column>
    <el-table-column
      prop="zip"
      label="邮编"
      width="120">
    </el-table-column>
    <el-table-column
      inline-template
      :context="_self"
      fixed="right"
      label="操作"
      width="100">
      <span>
        <el-button @click="handleClick" type="text" size="small">查看</el-button>
        <el-button type="text" size="small">编辑</el-button>
      </span>
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    methods: {
      handleClick() {
        console.log(1);
      }
    },

    data() {
      return {
        tableData: [{
          date: '2016-05-03',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-02',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-04',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-01',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }]
      }
    }
  }
</script>





固定列和表头

横纵内容过多时，可选择固定列和表头。
固定列和表头可以同时使用，只需要将上述两个属性分别设置好即可。
<template>
  <el-table
    :data="tableData3"
    border
    style="width: 100%"
    height="250">
    <el-table-column
      fixed
      prop="date"
      label="日期"
      width="150">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="120">
    </el-table-column>
    <el-table-column
      prop="province"
      label="省份"
      width="120">
    </el-table-column>
    <el-table-column
      prop="city"
      label="市区"
      width="120">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址"
      width="300">
    </el-table-column>
    <el-table-column
      prop="zip"
      label="邮编"
      width="120">
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData3: [{
          date: '2016-05-03',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-02',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-04',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-01',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-08',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-06',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-07',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }]
      }
    }
  }
</script>






多级表头
数据结构比较复杂的时候，可使用多级表头来展现数据的层次关系。
只需要在 el-table-column 里面嵌套 el-table-column，就可以实现多级表头。
<template>
  <el-table
    :data="tableData3"
    border
    style="width: 100%">
    <el-table-column
      prop="date"
      label="日期"
      width="150">
    </el-table-column>
    <el-table-column label="配送信息">
      <el-table-column
        prop="name"
        label="姓名"
        width="120">
      </el-table-column>
      <el-table-column label="地址">
        <el-table-column
          prop="province"
          label="省份"
          width="120">
        </el-table-column>
        <el-table-column
          prop="city"
          label="市区"
          width="120">
        </el-table-column>
        <el-table-column
          prop="address"
          label="地址"
          width="300">
        </el-table-column>
        <el-table-column
          prop="zip"
          label="邮编"
          width="120">
        </el-table-column>
      </el-table-column>
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData3: [{
          date: '2016-05-03',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-02',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-04',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-01',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-08',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-06',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }, {
          date: '2016-05-07',
          name: '王小虎',
          province: '上海',
          city: '普陀区',
          address: '上海市普陀区金沙江路 1518 弄',
          zip: 200333
        }]
      }
    }
  }
</script>




单选
选择单行数据时使用色块表示。
Table 组件提供了单选的支持，只需要配置highlight-current-row属性即可实现单选。之后由current-change事件来管理选中时触发的事件，它会传入currentRow，oldCurrentRow。如果需要显示索引，可以增加一列el-table-column，设置type属性为index即可显示从 1 开始的索引号。
<template>
  <el-table
    :data="tableData"
    highlight-current-row
    @current-change="handleCurrentChange"
    style="width: 100%">
    <el-table-column
      type="index"
      width="50">
    </el-table-column>
    <el-table-column
      property="date"
      label="日期"
      width="120">
    </el-table-column>
    <el-table-column
      property="name"
      label="姓名"
      width="120">
    </el-table-column>
    <el-table-column
      property="address"
      label="地址">
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1517 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1519 弄'
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1516 弄'
        }],
        currentRow: null
      }
    },

    methods: {
      handleCurrentChange(val) {
        this.currentRow = val;
      }
    }
  }
</script>




多选
选择多行数据时使用 Checkbox。
实现多选非常简单: 手动添加一个el-table-column，设type属性为selection即可。在本例中，为了方便说明其他属性，我们还使用了inline-template和show-overflow-tooltip：设置了inline-template属性后，可以通过调用row对象中的值取代prop属性的设置；默认情况下若内容过多会折行显示，若需要单行显示可以使用show-overflow-tooltip属性，它接受一个Boolean，为true时多余的内容会在 hover 时以 tooltip 的形式显示出来。
<template>
  <el-table
    :data="tableData3"
    border
    style="width: 100%"
    @selection-change="handleSelectionChange">
    <el-table-column
      type="selection"
      width="50">
    </el-table-column>
    <el-table-column
      inline-template
      label="日期"
      width="120">
      <div>{{ row.date }}</div>
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="120">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址"
      show-overflow-tooltip>
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData3: [{
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-08',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-06',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-07',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }],
        multipleSelection: []
      }
    },

    methods: {
      handleSelectionChange(val) {
        this.multipleSelection = val;
      }
    }
  }
</script>





 排序
对表格进行排序，可快速查找或对比数据。
在列中设置sortable属性即可实现以该列为基准的排序，接受一个Boolean，默认为false。在本例中，我们还使用了formatter属性，它用于格式化指定列的值，接受一个Function，会传入两个参数：row和column，可以根据自己的需求进行处理。
<template>
  <el-table
    :data="tableData"
    border
    style="width: 100%">
    <el-table-column
      prop="date"
      label="日期"
      sortable
      width="180">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="180">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址"
      :formatter="formatter">
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1517 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1519 弄'
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1516 弄'
        }]
      }
    },
    methods: {
      formatter(row, column) {
        return row.address;
      }
    }
  }
</script>





筛选
对表格进行筛选，可快速查找到自己想看的数据。
在列中设置filtersfilter-method属性即可开启该列的筛选，filters 是一个数组，filter-method是一个方法，它用于决定某些数据是否显示，会传入两个参数：value和row。
<template>
  <el-table
    :data="tableData"
    border
    style="width: 100%">
    <el-table-column
      prop="date"
      label="日期"
      sortable
      width="180">
    </el-table-column>
    <el-table-column
      prop="name"
      label="姓名"
      width="180">
    </el-table-column>
    <el-table-column
      prop="address"
      label="地址"
      :formatter="formatter">
    </el-table-column>
    <el-table-column
      prop="tag"
      label="标签"
      width="100"
      :filters="[{ text: '家', value: '家' }, { text: '公司', value: '公司' }]"
      :filter-method="filterTag"
      inline-template>
      <el-tag :type="row.tag === '家' ? 'primary' : 'success'" close-transition>{{row.tag}}</el-tag>
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄',
          tag: '家'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1517 弄',
          tag: '公司'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1519 弄',
          tag: '家'
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1516 弄',
          tag: '公司'
        }]
      }
    },
    methods: {
      formatter(row, column) {
        return row.address;
      },
      filterTag(value, row) {
        return row.tag === value;
      }
    }
  }
</script>




自定义列模板
自定义列的显示内容，可组合其他组件使用。
通过设置 inline-template 属性可以开启自定义模板功能，此时 el-table-column 的上下文指的是 el-table 所处的上下文，当然你可以通过 context 属性指定上下文环境，例如设置成 :context="_self" 就是指的当前上下文。有些时候我们会把 table 封装在其他组件里，通过 slot 设置 table-column，这样的话就要注意设置 context。在 column 组件内部，可以获取到 row, column, $index 和 store（table 内部的状态管理）的数据。
<template>
  <el-table
    :data="tableData"
    border
    style="width: 100%">
    <el-table-column
      inline-template
      label="日期"
      width="180">
      <div>
        <el-icon name="time"></el-icon>
        <span style="margin-left: 10px">{{ row.date }}</span>
      </div>
    </el-table-column>
    <el-table-column
      inline-template
      label="姓名"
      width="180">
      <el-popover trigger="hover" placement="top">
        <p>姓名: {{ row.name }}</p>
        <p>住址: {{ row.address }}</p>
        <div slot="reference" class="name-wrapper">
          <el-tag>{{ row.name }}</el-tag>
        </div>
      </el-popover>
    </el-table-column>
    <el-table-column
      :context="_self"
      inline-template
      label="操作">
      <div>
        <el-button
          size="small"
          @click="handleEdit($index, row)">
          编辑
        </el-button>
        <el-button
          size="small"
          type="danger"
          @click="handleDelete($index, row)">
          删除
        </el-button>
      </div>
    </el-table-column>
  </el-table>
</template>

<script>
  export default {
    data() {
      return {
        tableData: [{
          date: '2016-05-02',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1518 弄'
        }, {
          date: '2016-05-04',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1517 弄'
        }, {
          date: '2016-05-01',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1519 弄'
        }, {
          date: '2016-05-03',
          name: '王小虎',
          address: '上海市普陀区金沙江路 1516 弄'
        }]
      }
    },
    methods: {
      handleEdit(index, row) {
        console.log(index, row);
      },
      handleDelete(index, row) {
        console.log(index, row);
      }
    }
  }
</script>